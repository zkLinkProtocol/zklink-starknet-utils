use array::ArrayTrait;
use zklink_starknet_utils::keccak::keccak_u128s_be;

#[test]
#[available_gas(200000000)]
fn test_keccak_u128s_be() {
    let mut array: Array<u128> = ArrayTrait::<u128>::new();
    let res: u256 = keccak_u128s_be(array.span(), 0);
    let hash: u256 = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
    assert(res == hash, 'keccak_0_wrong');

    array.append(0);
    array.append(1);

    // 0x0000000000000000000000000000000000000000000000000000000000000001
    let res: u256 = keccak_u128s_be(array.span(), 32);
    let hash: u256 = 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6;

    assert(res == hash, 'keccak_1_wrong');

    array.append(0);
    array.append(2);
    array.append(0);
    array.append(3);
    array.append(0);
    array.append(4);

    // 0x0000000000000000000000000000000000000000000000000000000000000001
    // 0x0000000000000000000000000000000000000000000000000000000000000002
    // 0x0000000000000000000000000000000000000000000000000000000000000003
    // 0x0000000000000000000000000000000000000000000000000000000000000004
    let res: u256 = keccak_u128s_be(array.span(), 128);
    let hash: u256 = 0x392791df626408017a264f53fde61065d5a93a32b60171df9d8a46afdf82992d;
    assert(res == hash, 'keccak_2_wrong');

    // 0x10111213141516171810111213141516
    // 0x17180101020102030400000001000003
    // 0x04050607080000000000000010111213
    // 0x14151617180000000000000001020304
    // 0x05060708090000000000000000000102
    // 0x0304050607015401855d7796176b05d1
    // 0x60196ff92381eb7910f5446c2e0e04e1
    // 0x3d
    let mut array: Array<u128> = ArrayTrait::<u128>::new();
    array.append(0x10111213141516171810111213141516);
    array.append(0x17180101020102030400000001000003);
    array.append(0x04050607080000000000000010111213);
    array.append(0x14151617180000000000000001020304);
    array.append(0x05060708090000000000000000000102);
    array.append(0x0304050607015401855d7796176b05d1);
    array.append(0x60196ff92381eb7910f5446c2e0e04e1);
    array.append(0x3d);

    let res: u256 = keccak_u128s_be(array.span(), 113);
    let hash: u256 = 0xbdef43eea0d9023b5422ab607366ec7ed92c84442c4390ec5a59d84e4a0d8ad1;
    assert(res == hash, 'keccak_3_wrong');

    // 0x10111213141516171810111213141516
    // 0x17180101020102030400000001000003
    // 0x04050607080000000000000010111213
    // 0x14151617180000000000000001020304
    // 0x05060708090000000000000000000102
    // 0x0304050607015401855d7796176b05d1
    // 0x60196ff92381eb7910f5446c2e0e04e1
    // 0x3db2194a4f
    let mut array: Array<u128> = ArrayTrait::<u128>::new();
    array.append(0x10111213141516171810111213141516);
    array.append(0x17180101020102030400000001000003);
    array.append(0x04050607080000000000000010111213);
    array.append(0x14151617180000000000000001020304);
    array.append(0x05060708090000000000000000000102);
    array.append(0x0304050607015401855d7796176b05d1);
    array.append(0x60196ff92381eb7910f5446c2e0e04e1);
    array.append(0x3db2194a4f);

    let res: u256 = keccak_u128s_be(array.span(), 117);
    let hash: u256 = 0xcb1bcb5098bb2f588b82ea341e3b1148b7d1eeea2552d624b30f4240b5b85995;
    assert(res == hash, 'keccak_4_wrong');

    // 0x10111213141516171810111213141516
    // 0x17180101020102030400000001000003
    // 0x04050607080000000000000010111213
    // 0x14151617180000000000000001020304
    // 0x05060708090000000000000000000102
    // 0x0304050607015401855d7796176b05d1
    // 0x60196ff92381eb7910f5446c2e0e04e1
    // 0x3db2194a4f010203
    let mut array: Array<u128> = ArrayTrait::<u128>::new();
    array.append(0x10111213141516171810111213141516);
    array.append(0x17180101020102030400000001000003);
    array.append(0x04050607080000000000000010111213);
    array.append(0x14151617180000000000000001020304);
    array.append(0x05060708090000000000000000000102);
    array.append(0x0304050607015401855d7796176b05d1);
    array.append(0x60196ff92381eb7910f5446c2e0e04e1);
    array.append(0x3db2194a4f0102);

    let res: u256 = keccak_u128s_be(array.span(), 119);
    let hash: u256 = 0x6e5df8ceafd577cd683d5b54dd25e9538d6c48f650b861a20e1d30728df2c2c0;
    assert(res == hash, 'keccak_5_wrong');

    // 0x10111213141516171810111213141516
    // 0x17180101020102030400000001000003
    // 0x04050607080000000000000010111213
    // 0x14151617180000000000000001020304
    // 0x05060708090000000000000000000102
    // 0x0304050607015401855d7796176b05d1
    // 0x60196ff92381eb7910f5446c2e0e04e1
    // 0x3db2194a4f010203
    let mut array: Array<u128> = ArrayTrait::<u128>::new();
    array.append(0x10111213141516171810111213141516);
    array.append(0x17180101020102030400000001000003);
    array.append(0x04050607080000000000000010111213);
    array.append(0x14151617180000000000000001020304);
    array.append(0x05060708090000000000000000000102);
    array.append(0x0304050607015401855d7796176b05d1);
    array.append(0x60196ff92381eb7910f5446c2e0e04e1);
    array.append(0x3db2194a4f010203);

    let res: u256 = keccak_u128s_be(array.span(), 120);
    let hash: u256 = 0x0590c4eecdd684bc42f50e30d4796e85fba3f2c8f7a2c8db7be468b6ab616a0d;
    assert(res == hash, 'keccak_6_wrong');

    // 0x10111213141516171810111213141516
    // 0x17180101020102030400000001000003
    // 0x04050607080000000000000010111213
    // 0x14151617180000000000000001020304
    // 0x05060708090000000000000000000102
    // 0x0304050607015401855d7796176b05d1
    // 0x60196ff92381eb7910f5446c2e0e04e1
    // 0x3db2194a4f010203
    let mut array: Array<u128> = ArrayTrait::<u128>::new();
    array.append(0x10111213141516171810111213141516);
    array.append(0x17180101020102030400000001000003);
    array.append(0x04050607080000000000000010111213);
    array.append(0x14151617180000000000000001020304);
    array.append(0x05060708090000000000000000000102);
    array.append(0x0304050607015401855d7796176b05d1);
    array.append(0x60196ff92381eb7910f5446c2e0e04e1);
    array.append(0x3db2194a4f01020304);

    let res: u256 = keccak_u128s_be(array.span(), 121);
    let hash: u256 = 0x2ab20d4e41899f0e11ea4cfa2e09d4aede4943187c26a3c4e11db9367371df4e;
    assert(res == hash, 'keccak_7_wrong');

    // 0x10111213141516171810111213141516
    // 0x17180101020102030400000001000003
    // 0x04050607080000000000000010111213
    // 0x14151617180000000000000001020304
    // 0x05060708090000000000000000000102
    // 0x0304050607015401855d7796176b05d1
    // 0x60196ff92381eb7910f5446c2e0e04e1
    // 0x3db2194a4f01020304050607080910
    let mut array: Array<u128> = ArrayTrait::<u128>::new();
    array.append(0x10111213141516171810111213141516);
    array.append(0x17180101020102030400000001000003);
    array.append(0x04050607080000000000000010111213);
    array.append(0x14151617180000000000000001020304);
    array.append(0x05060708090000000000000000000102);
    array.append(0x0304050607015401855d7796176b05d1);
    array.append(0x60196ff92381eb7910f5446c2e0e04e1);
    array.append(0x3db2194a4f01020304050607080910);

    let res: u256 = keccak_u128s_be(array.span(), 127);
    let hash: u256 = 0x09181fbd595672834320ff7d0f62e4f5341836a98388e20cca7c540c92579fdc;
    assert(res == hash, 'keccak_8_wrong');

    // 0x10111213141516171810111213141516
    // 0x17180101020102030400000001000003
    // 0x04050607080000000000000010111213
    // 0x14151617180000000000000001020304
    // 0x05060708090000000000000000000102
    // 0x0304050607015401855d7796176b05d1
    // 0x60196ff92381eb7910f5446c2e0e04e1
    // 0x3db2194a4f0102030405060708091011
    let mut array: Array<u128> = ArrayTrait::<u128>::new();
    array.append(0x10111213141516171810111213141516);
    array.append(0x17180101020102030400000001000003);
    array.append(0x04050607080000000000000010111213);
    array.append(0x14151617180000000000000001020304);
    array.append(0x05060708090000000000000000000102);
    array.append(0x0304050607015401855d7796176b05d1);
    array.append(0x60196ff92381eb7910f5446c2e0e04e1);
    array.append(0x3db2194a4f0102030405060708091011);

    let res: u256 = keccak_u128s_be(array.span(), 128);
    let hash: u256 = 0x2f41952c8a08cc0d6c5b5102bc43735278f1b0fbfdab434588363d42d050e74d;
    assert(res == hash, 'keccak_9_wrong');
}
